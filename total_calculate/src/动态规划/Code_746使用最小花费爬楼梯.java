package 动态规划;

    /*数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值cost[i]（下标从 0 开始）。
    每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。
    请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。
    输出：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
    输出：6
    */
/*
 *      思路：设置dp数组用于记录到达第n阶楼梯所需要的最少步数，由题知消耗每层对应能量值可选择上两阶楼梯或一阶，所以到达第n阶楼梯所消耗的最少能量
 *      值可有两种产生方式，一是到达n-1阶楼梯所需最小能量加第n-1阶楼梯消耗的能量，二是到达第n-2阶阶楼梯所需最小能量加第n-2阶楼梯消耗的能量，两者中小
 *      的则为到达第n阶的最小能量值，以此逻辑从前向后推算，补充dp数组，由于可选择从第0阶或者第1阶开始，所以初始化dp[0]和dp[1]为0
 *      初始化dp数组：dp[0]=dp[1]=0。
 *      状态转移方程：dp[i]=min(dp[i−1]+cost[i−1],dp[i−2]+cost[i−2])
 *  */

public class Code_746使用最小花费爬楼梯 {

    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int[] dp = new int[n + 1];
        dp[0] = dp[1] = 0;
        for (int i = 2; i <= n; i++) {
            dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
        }
        return dp[n];
    }
}
