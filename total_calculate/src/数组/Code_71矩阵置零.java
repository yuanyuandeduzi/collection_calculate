package 数组;

/*
*       题目：给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。
*
*       进阶：
*           一个直观的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。
*           一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。
*
*       输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]
*       输出：[[1,0,1],[0,0,0],[1,0,1]]
*
*       输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
*       输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
* */

/*
*       题解：通过两次遍历数组实现对矩阵中元素进行置零，第一次遍历对需要置零的行和列进行标记，在此处可实现
*       算法的优化：
*       1.定义一个和原数组等大的一个标记数组，用于记录标记需要被置零的行和列，遍历原数组，若当
*       前值为零，则将标记数组中次位的行和列上面的元素进行标记，遍历完原数组，完成标记数组的创建，然后遍历
*       标记数组，将被标记值所对应的原数组的值修改为0，（空间O（M * n ））
*       2.定义两个boolean一维数组，一个用于记录哪一列需要被置零，一个用于记录哪一行需要被置零，次两个一
*       维数组可以一一组合成为一个二维数组的方位图，实现对原数组所有元素的记录，仍需两次遍历，初次遍历设置
*       两个一位数组的值，若当前元素为零，则将次行和列所对应的一维数组的值修改为true,表示当前点需要被置零
*       ，第二次遍历原数组，若当前点的行或列的标记为true，则将次元素修改为0，最终实现矩阵的置零
* */


public class Code_71矩阵置零 {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;

        boolean[] with = new boolean[n];
        boolean[] hight = new boolean[m];

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] == 0) {
                    with[j] = true;
                    hight[i] = true;
                }
            }
        }

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(with[j] || hight[i]) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
}
